name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy, rustfmt
        
    - name: Install just and cargo-hack
      uses: taiki-e/install-action@v2
      with:
        tool: just,cargo-hack
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build project
      id: build
      run: |
        echo "üèóÔ∏è Building project..."
        cargo build --verbose
        
    - name: Run code checks
      id: check
      run: |
        echo "üîç Running code checks..."
        just check
        
    - name: Run basic tests
      id: test-basic
      run: |
        echo "üß™ Running basic tests..."
        cargo test --verbose
        
    - name: Run extensive tests
      id: test-extensive
      run: |
        echo "üöÄ Running extensive tests..."
        just test
        
    - name: Send Discord notification
      if: always()
      run: |
        # Determine overall job status
        JOB_STATUS="success"
        if [[ "${{ steps.build.outcome }}" == "failure" || "${{ steps.check.outcome }}" == "failure" || "${{ steps.test-basic.outcome }}" == "failure" || "${{ steps.test-extensive.outcome }}" == "failure" ]]; then
          JOB_STATUS="failure"
        fi
        
        # Determine which step failed (if any)
        FAILED_STEP="None"
        if [[ "${{ steps.build.outcome }}" == "failure" ]]; then
          FAILED_STEP="Build (cargo build)"
        elif [[ "${{ steps.check.outcome }}" == "failure" ]]; then
          FAILED_STEP="Code checks (just check)"
        elif [[ "${{ steps.test-basic.outcome }}" == "failure" ]]; then
          FAILED_STEP="Basic tests (cargo test)"
        elif [[ "${{ steps.test-extensive.outcome }}" == "failure" ]]; then
          FAILED_STEP="Extensive tests (just test)"
        fi
        
        # Create status indicators
        BUILD_STATUS="${{ steps.build.outcome == 'success' && '‚úÖ' || steps.build.outcome == 'failure' && '‚ùå' || '‚è≠Ô∏è' }}"
        CHECK_STATUS="${{ steps.check.outcome == 'success' && '‚úÖ' || steps.check.outcome == 'failure' && '‚ùå' || '‚è≠Ô∏è' }}"
        TEST_BASIC_STATUS="${{ steps.test-basic.outcome == 'success' && '‚úÖ' || steps.test-basic.outcome == 'failure' && '‚ùå' || '‚è≠Ô∏è' }}"
        TEST_EXTENSIVE_STATUS="${{ steps.test-extensive.outcome == 'success' && '‚úÖ' || steps.test-extensive.outcome == 'failure' && '‚ùå' || '‚è≠Ô∏è' }}"
        
        # Prepare JSON payload based on job status
        if [[ "$JOB_STATUS" == "success" ]]; then
          JSON_PAYLOAD='{
            "embeds": [{
              "title": "‚úÖ CI Pipeline Success",
              "description": "All tests passed successfully!",
              "color": 3066993,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch", 
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": true
                },
                {
                  "name": "Build Status",
                  "value": "üèóÔ∏è Build: '"$BUILD_STATUS"'\nüîç Check: '"$CHECK_STATUS"'\nüß™ Basic Tests: '"$TEST_BASIC_STATUS"'\nüöÄ Extensive Tests: '"$TEST_EXTENSIVE_STATUS"'",
                  "inline": false
                }
              ],
              "footer": {
                "text": "Core Model Macros CI"
              },
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }],
            "components": [{
              "type": 1,
              "components": [{
                "type": 2,
                "style": 5,
                "label": "View Build",
                "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }]
            }]
          }'
        else
          JSON_PAYLOAD='{
            "embeds": [{
              "title": "‚ùå CI Pipeline Failed",
              "description": "Build or tests failed!",
              "color": 15158332,
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "[`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                  "inline": true
                },
                {
                  "name": "Failed Step",
                  "value": "'"$FAILED_STEP"'",
                  "inline": false
                },
                {
                  "name": "Build Status",
                  "value": "üèóÔ∏è Build: '"$BUILD_STATUS"'\nüîç Check: '"$CHECK_STATUS"'\nüß™ Basic Tests: '"$TEST_BASIC_STATUS"'\nüöÄ Extensive Tests: '"$TEST_EXTENSIVE_STATUS"'",
                  "inline": false
                }
              ],
              "footer": {
                "text": "Core Model Macros CI"
              },
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }],
            "components": [{
              "type": 1,
              "components": [{
                "type": 2,
                "style": 4,
                "label": "View Failed Build",
                "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }]
            }]
          }'
        fi
        
        # Send Discord webhook with error handling
        echo "Sending Discord notification..."
        echo "Job Status: $JOB_STATUS"
        echo "Failed Step: $FAILED_STEP"
        
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -H "Content-Type: application/json" -d "$JSON_PAYLOAD" https://discord.com/api/webhooks/1391549647381594152/q30qmcaFaQWf-_yPCP6d-82za6U9-BM9lKjyNgPL4Lp8fTmdtsYzgRpEBoN1qnNBPv8y)
        
        # Extract HTTP status code
        HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        
        if [[ $HTTP_STATUS -eq 200 || $HTTP_STATUS -eq 204 ]]; then
          echo "‚úÖ Discord notification sent successfully (HTTP $HTTP_STATUS)"
        else
          echo "‚ùå Discord notification failed (HTTP $HTTP_STATUS)"
          echo "Response: $RESPONSE"
        fi 